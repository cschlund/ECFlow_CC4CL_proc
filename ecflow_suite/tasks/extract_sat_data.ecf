%include <pbs_parallel_extract_sat_data.h>
%include <head.h>
%include <export.h>

# -- no core file
export ATP_ENABLED=0
# -- core file
#export ATP_ENABLED=1
#ulimit -c unlimited
# -- stacksize (keep it always that way)
ulimit -s unlimited

#source /perm/ms/de/sf2/sfinkens/pps_filter/modules.ksh
source /perm/ms/de/sf2/sfinkens/pps_filter/environment.ksh

echo "I am task %TASK% in family %FAMILY% responsible for extracting daily satellite data tarfiles"

if [ %DUMMYRUN% == 1 ]; then 

    python -c "import time; import numpy; time.sleep(numpy.random.randint(1, 20))"

else

    # -- settings
    sat_date_base="%SATELLITE%_%START_YEAR%_%START_MONTH%"

    # -- working directory: write core file here
    cd %ESA_ECF_LOG_DIR%
    
    # -- create job id number
    primary_id=`echo ${PBS_JOBID} | cut -f1 -d"."`
    id=`date +%%s`
    sleep 3
    jid=ID${primary_id}_US${id}
    
    # -- define path to taskfile
    taskfile="%ESA_CONFIGDIR%/extract_sat_data_${sat_date_base}_${jid}.txt"
    rm -f $taskfile
    touch $taskfile

    # -- write MPMD task list
    echo "Write MPMD Taskfile for extract_sat_data in SUITE/FAMILY: "%SUITE%/%FAMILY%

    if [ %SENSOR% == "AVHRR" ]
    then 
    	platform=`echo %SATELLITE% | tr '[:upper:]' '[:lower:]'`
    	tar_prefix="AVHRR_GAC_L1C_"
    	tar_suffix=".tar.bz2"
    	pattern="${tar_prefix}%SATELLITE%_%START_YEAR%%START_MONTH%*${tar_suffix}"
    elif [ %SATELLITE% == "AQUA" ]
    then
    	platform="MYD"
    	tar_prefix="MYD"
    	tar_suffix=".tar"
    	pattern="${tar_prefix}*_%START_YEAR%_%START_MONTH%*${tar_suffix}"
    elif [ %SATELLITE% == "TERRA" ]
    then
    	platform="MOD"
    	tar_prefix="MOD"
    	tar_suffix=".tar"
    	pattern="${tar_prefix}*_%START_YEAR%_%START_MONTH%*${tar_suffix}"
    fi

    download_dir="%ESA_INPUTDIR%/%SENSOR%/${platform}/%START_YEAR%/%START_MONTH%"
    cd ${download_dir}
    
    for f in `pwd`/${pattern}; do
    	if [ -e "$f" ]
    	then
    	    echo "Archives to be extracted available." 
    	else
    	    echo "No archives to be extracted available."
    	    ecflow_client --complete
    	    trap 0
    	    exit
    	fi
    	break
    done

    # -- create list of daily zip files
    zip_files=$(ls `pwd`/${pattern})
    ndays=`cal ${START_MONTH} ${START_YEAR} | egrep -v [a-z] | wc -w`

    # make L1 directories for each day: subsequent scripts depend on availablility of
    # directory for each day, disregarding availability of daily data
    for (( i=1; i<=${ndays}; i++ ))
    do
	ii=$(printf %%02d $i)
    	if [ %SENSOR% == "AVHRR" ]
    	then 	
            final_dir="${download_dir}/${ii}/%START_YEAR%%START_MONTH%${ii}"
    	elif [ %SENSOR% == "MODIS" ]
    	then
            final_dir="${download_dir}/${ii}"
	fi
        # -- create final input directory
	mkdir -p ${final_dir}
    done

    # -- for each daily zip file, create output folder and add entry to taskfile
    for zipfile in ${zip_files}
    do
        echo " * Working on: ${zipfile}"

         # -- extract day from zipfile
        fbase=`echo ${zipfile} | cut -d "/" -f14`

    	if [ %SENSOR% == "AVHRR" ]
    	then 
            split=`echo ${fbase} | cut -d "_" -f5`
            fday=`echo ${split} | cut -c 7-8`
            final_dir="${download_dir}/${fday}/%START_YEAR%%START_MONTH%${fday}"
            # -- write MPMD taskfile
    	    echo "tar xfj ${zipfile} -C ${final_dir} && rm -f ${zipfile}" >> $taskfile	
    	elif [ %SENSOR% == "MODIS" ]
    	then
            split=`echo ${fbase} | cut -d "_" -f4`
            fday=`echo ${split} | cut -c 1-2`
            final_dir="${download_dir}/${fday}"
            # -- write MPMD taskfile
    	    echo "tar xf ${zipfile} -C ${final_dir} && rm -f ${zipfile}" >> $taskfile	
    	fi

    done

    # To avoid creation of cores in case of abort, which takes ages...
    module unload atp

    # For OpenMP tasks
    export OMP_NUM_THREADS=$EC_threads_per_task
    
    # -- call aprun using the MPMD submitter
    echo "Now start MPMD Job using "%MPMD_SUBMITTER%" and "${taskfile}

    # -- extract and subsequently delete daily zip files
    aprun -n $EC_total_tasks -N $EC_tasks_per_node %MPMD_SUBMITTER% ${taskfile}

    if [ %SENSOR% == "AVHRR" ]
    then 
        # do ch3.7 filtering of AVHRR data here
        # -- define path to taskfile
	taskfile="%ESA_CONFIGDIR%/extract_sat_data_${sat_date_base}_${jid}.txt"
	rm -f $taskfile
	touch $taskfile

	length_prefix_avhrr=`expr length "ECC_GAC_sunsatangles_"`
	prefix_filter_avhrr="S_NWC_avhrr_"
	prefix_filter_sunsat="S_NWC_sunsatangles_"
	days=`exec ls`
	for d in ${days}
	do
	    subfolder=`exec ls ${download_dir}/${d}`
	    workdir=${download_dir}/${d}/${subfolder}
	    cd ${workdir}
	    files=`exec ls ECC_GAC_sunsat*` #files=`exec ls ECC_GAC_{avhrr,sunsat}*`
	    for f in ${files}
	    do	
		length_f=`expr length ${f}`
		link_sunsat=${prefix_filter_sunsat}${f:${length_prefix_avhrr}:${length_f}}
		link_avhrr=${prefix_filter_avhrr}${f:${length_prefix_avhrr}:${length_f}}
		origin_avhrr="ECC_GAC_avhrr_"${f:${length_prefix_avhrr}:${length_f}}
		filter_avhrr=${prefix_filter_avhrr}"filtered_"${f:${length_prefix_avhrr}:${length_f}}
		origin_sunsat=$f
		ln -s ${origin_sunsat} ${link_sunsat}
		ln -s ${origin_avhrr} ${link_avhrr}
		echo "cd ${workdir} && python /perm/ms/de/sf6/gac_2014/scr/ppsGacFilter37.py --gacfile ${link_sunsat} && if [ -e ${filter_avhrr} ]; then mv ${filter_avhrr} ${origin_avhrr}; fi && rm -f ${link_sunsat} ${link_avhrr}" >> ${taskfile}
	    done	
	done
	cd ${download_dir}
	ecflow_client --alter add variable 'EC_FILTER_TASKFILE' "$taskfile" '/%SUITE%/%FAMILY%'	
    fi
fi

%include <tail.h>
