%include <pbs_parallel.h>
%include <head_retrieval.h>
%include <export.h>

export ATP_ENABLED=1
ulimit -c unlimited
ulimit -s unlimited

echo "I am task %TASK% in family %FAMILY% responsible for proc2 (ORAC)"

if [ %DUMMYRUN% == 1 ]; then 

    python -c "import time; import numpy; time.sleep(numpy.random.randint(1, 20))"

else

    date_sat_base="%START_YEAR%_%START_MONTH%_%SATELLITE%"

    # -- config file
    cfg_typ="2_process_"
    cfg_bas="%CFG_PREFIX%${cfg_typ}${date_sat_base}%CFG_SUFFIX%"
    cfg_fil="%ESA_CONFIGDIR%/${cfg_bas}"

    # -- working directory: write core file here
    cd %ESA_ROUTINE%
    

    # -- some more export statements
    OMP_STACKSIZE=256MB
    export OMP_NUM_THREADS=${EC_threads_per_task}
    export OMP_STACKSIZE=${OMP_STACKSIZE}
    export LD_LIBRARY_PATH=%LD_LIB_PATH%
    
    
    # -- define job name
    job_name=${PBS_JOBNAME}
    job_name=${job_name:-CL}
    
    
    # -- source config files
    . %CFG_PATHS_FILE%
    . %CFG_ATTRI_FILE%
    . ${cfg_fil}
    
    
    # -- define unix start and stop times
    unix_start=`${ESA_ROUT}/ymdhms2unix.ksh $STARTYEAR $STARTMONTH $STARTDAY`
    
    if [ $STOPDAY -le 0 ]; then 
        day_stop=`cal $STOPMONTH $STOPYEAR | tr -s " " "\n" | tail -1` 
    else
        day_stop=$STOPDAY
    fi
    
    unix_stop=`${ESA_ROUT}/ymdhms2unix.ksh $STOPYEAR $STOPMONTH $day_stop`
    unix_counter=$unix_start
    
    # -- processing: 1 month of a year!
    ACTMONTH=$STARTMONTH
    ACTYEAR=$STARTYEAR
    
    # -----------------------------------------
    # -- loop over the specified time period
    # -----------------------------------------
    while [ $unix_counter -le $unix_stop ]; do 
        
        # -- count number of days
        ndays=`cal $ACTMONTH $ACTYEAR | tr -s " " "\n" | tail -1`
    
    
        # -- get ID
        primary_id=`echo ${PBS_JOBID} | cut -f1 -d"."`
        primary_id=${primary_id:-CL}
        jid=${job_name}_ID${primary_id}
    
    
        # -- get (UNIX time) seconds as (additional) identifier
        sleep 3
        id=`date +%%s`
        jid=${jid}_US${id}
        echo ${jid} running
    
    
        # -- Convert month
        ACTMONTHS=$(printf %%02d $ACTMONTH)
    
    
        # -- write daily config
        %PROC2_ORAC_KSH% %CFG_PATHS_FILE% ${cfg_fil} %CFG_ATTRI_FILE% \
            ${ACTYEAR} ${ACTMONTH} ${STARTDAY} ${day_stop} \
            ${instrument} ${platform} ${jid} 
    
    
        # -- create cmd filename same as inside proc_2_process.ksh 
        #    which creates the content of the cmd file
        logs_monthly=${LOGDIR}/processing/${ACTYEAR}${ACTMONTHS}_${instrument}_${platform}_${jid}
        cmd_file=${logs_monthly}/process_single_day_${ACTYEAR}${ACTMONTHS}_${instrument}_${platform}_${jid}.cmd
    
    
        # -- define logfiles
        out_file=${logs_monthly}/${PBS_JOBNAME}_${jid}.log.out
        err_file=${logs_monthly}/${PBS_JOBNAME}_${jid}.log.err
    
    
        # -- put list of daily config files together
        inventory_file_daily_config=${logs_monthly}/process_single_day_${ACTYEAR}${ACTMONTHS}_${instrument}_${platform}_${jid}.cdaily.lst
        rm -rf ${inventory_file_daily_config}
    
    
        nfiles_conf=`find ${logs_monthly}/ -maxdepth 2 -type f -wholename "*process_single_day*.config" | wc -l`
        echo $nfiles_conf >> ${inventory_file_daily_config}
        find ${logs_monthly}/ -maxdepth 2 -type f -wholename "*process_single_day*.config"| sort  >>  ${inventory_file_daily_config}
    
    
        # --------------------------------------------------------------------
        # By now all directories and environment files 
        # (output directories, driver files, config files etc)
        # for this period/scope (=month) have been created.
        # Thus, proceed by creating an inventory file 
        # (could also be done during the previous step?)
        # which holds the paths to all elements which are to be processed 
        # (all granules/orbits for this month)
        # in the sense that the paths to the top level output directories 
        # of all these elements are listed in this file
        # --------------------------------------------------------------------
        # start now the actual parallel processing by calling the
        # mpi wrapper and passing this inventory file to him
        # --------------------------------------------------------------------
    
        aprun -N $EC_tasks_per_node \
            -n $EC_total_tasks \
            -d $EC_threads_per_task \
            -j $EC_hyperthreads %WRAPPER_EXE% \
            ${inventory_file_daily_config} \
            ${instrument} ${platform} \
            ${ACTMONTHS} ${ACTYEAR} \
            ${wrapper_mode} ${jid} ${logs_monthly} \
            ${OUTPUTDIR} ${out_file} %CFG_PATHS_FILE% %CFG_ATTRI_FILE% \
            %SINGLE_DAY_KSH%
    
        
        echo " *** FINISHED: retrieval for %SATELLITE%/%SENSOR% "\
             "START=%START_YEAR%/%START_MONTH% END=%END_YEAR%/%END_MONTH% "
        
    
        # go to next month
        (( unix_counter = unix_counter+86400*ndays ))
    
        ((ACTMONTH=ACTMONTH+1))
    
        # if 12 months full, go to January of the following year
        if [ ACTMONTH -gt 12 ]; then
            ACTMONTH=1
            (( ACTYEAR=ACTYEAR+1))
        fi
    
    done
    # -----------------------------------------
    # END OF WHILE LOOP
    # -----------------------------------------

fi

%include <tail.h>
